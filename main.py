#!/usr/bin/python
# Copyright (C) 2014 Amri Abdesslem
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#--------------------------------------------------------------------

import readline
import sys, os
import peframe
import myvbox


class main(object):  # Custom completer

    def __init__(self, options):
        self.options = sorted(options)

    # Autocomplete functionality
    def complete(self, text, state):
        if state == 0:  # on first trigger, build possible matches
            if text:  # cache matches (entries that start with entered text)
                self.matches = [s for s in self.options
                                    if s and s.startswith(text)]
            else:  # no text entered, all matches possible
                self.matches = self.options[:]

        # return match indexed by state
        try:
            return self.matches[state]
        except IndexError:
            return None

def static(filename):
       	print "Use <strings> to show strings in the file"
        print "Use <peid> to detect packer signatures"
        print "Use <antidbg> to detect antidebug techniques in the file"
        print "Use <antivm> to detect anti virtualisation techniques in the file"
        print "Use <auto> to auto-analysis the file"
	while True:
               input = raw_input('Static>> ')
               if (input=="strings"):
                    peframe.analyse(filename,"--strings")
               elif (input=="peid"):
                    peframe.analyse(filename,"--peid")
               elif (input=='auto'):
                    peframe.autoanalysis(filename)
	       elif (input=='exit'):
		    return

if __name__ == '__main__':

	if not os.geteuid() == 0: sys.exit("\nOnly root can run this script\n")
	completer = main(["sandbox","static","strings","peid","auto","exit"])
	readline.set_completer(completer.complete)
	readline.parse_and_bind('tab: complete')
	filename = raw_input('Path to malware file: ')
	if not os.path.isfile(filename): sys.exit("\nFile not found\n")
	while(1):
       	    try:
          	input = raw_input('Hunter>> ')
          	if (input=="static"):
		    print "Start the static analysis"
	  	    static(filename)
          	elif (input=="sandbox"):
                    print "Dynamic analysis for suspicious files"
                    myvbox.myvbox(filename)
          	elif (input=='exit()'):
               	    sys.exit(0)
          	else :
               	    print "This command is not used"
	    except KeyboardInterrupt:
               	    print "type exit() to stop"
       	    except EOFError:
		    print "type exit() to stop"
