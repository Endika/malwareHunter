#!/usr/bin/python
# Copyright (C) 2014 Amri abdesslem
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#--------------------------------------------------------------------
# 1) Tested on Linux (Ubuntu 12.4)
#--------------------------------------------------------------------
from sandbox import VBoxAuto
import os, sys, time, shutil
import subprocess
from analysis import TShark
from analysis import Volatility
from analysis import INetSim
import analysis

'''
path to shared folder on your host machine where you'll
place malware to be picked up by the guest. this folder
should be shared with read-only permissions

Linux:    vbox_hostpath = '/home/ask3m/winVm'
'''
vbox_hostpath = '/home/ask3m/winVm'

# path to shared folder on your guest machine. this will
# always be in the form \\vboxsvr\YOURSHARENAME
vbox_guestpath = '\\\\vboxsvr\\winVm'

def myvbox(file):


    #if len(sys.argv) != 2:
        #print 'Usage: %s <file>' % argv[0]
        #return 0

    # select your VM to work with
    vm = VBoxAuto('winxp')
   
    if not vm.check():
        print 'Error initializing'
        sys.exit()
       
    #file = sys.argv[1]
       
    # copy the malware to the shared folder
    try:
        shutil.copy(file, vbox_hostpath)
    except Exception, e:
        print 'Cannot copy: %s' % e
        return
       
    try:

        # start the VM
        #if (vm.status=="PoweredOff"):
        vm.start()
        #simnet=INetSim("NetsimDir")
        #simnet.start()
        fichier= vbox_guestpath +"\\"+ os.path.basename(file)
        print vbox_guestpath +"\\"+ os.path.basename(file)
        # do static analysis and execute some tools such as regshot analysis here
        print "ok"
        # execute malware in the VM using the account test with password test
        #VBoxManage guestcontrol "my VM" execute --image "/bin/uname" --username root --password 123456 --wait-stdout -- -a
        #subprocess.call("VBoxManage guestcontrol winxp execute --image "+ fichier +" --username test --password test --wait-exit --wait-stdout")
        #subprocess.call("VBoxManage guestcontrol winxp execute --image "+ file +" --username user --password user --wait-stdout -- -a", shell=True)
        print "ok"
        vm.winexec(
            'test',
            'test',
            ["%s\\%s" % (vbox_guestpath, os.path.basename(file))]
            )
        # VM has to run in order to be able to make the RAM dump, then:

        #os.system("rm -f dump.elf")
        #subprocess.call("vboxmanage debugvm winxp dumpguestcore --filename dump.elf", shell=True)

        # python ./volatility/vol.py -f test.elf --profile=WinXPSP2x86 psxview
        # do post-execution analysis here
        #capture packets
        #os.system("rm -f test.pcap")
        pcap=open("test.pcap","a+")
        cap = TShark("test.pcap")
        cap.start("wlan0")
        #time.sleep(100)
        cap.stop()
        print cap.read()
        #Analyse  the memory dump
        #open("dump.elf","r")
        #vol=Volatility("dump.elf")
        #open("processlist.txt", "w").write(vol.pslist())
        #open("connection.txt", "w").write(vol.conns())
        #open("hooks.txt", "w").write(vol.hooks("hook"))
        #open("sockets.txt", "w").write(vol.sockets())
        #open("malfind.txt", "w").write(vol.malfind())
        #open("malfind.txt", "w").write(vol.psxview())
        #vol.malfind()
        #analysis.snortscan("test.pcap")
        #revert the VM to a clean state
        vm.revert('cleanimg')
        #if (vm.status=="Running"):
        vm.stop()
        #vboxmanage guestcontrol winxp exec --image "/opt/unique_scripts/test.py" --username foo --password bar --verbose --wait-stdout
        #HKEY_CURRENT_USER\Software\Microsoft\SystemCertificates
        #regwatch
       
    except Exception, e:
        print e
        return

#if __name__ == '__main__':
    #'main(sys.argv)

